name: Build pybind11 modules for all OS

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      # ---- Install OpenCV C++ Dev for each OS ----
      - name: Install OpenCV C++ (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libopencv-dev

      - name: Install OpenCV C++ (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install opencv
          echo "export OpenCV_DIR=$(brew --prefix opencv)/share/opencv4" >> $GITHUB_ENV

      - name: Install OpenCV C++ (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          choco install opencv -y
          echo "OpenCV_DIR=C:/tools/opencv/build" >> $env:GITHUB_ENV

      # ---- Install Python deps ----
      - name: Install Python packages
        run: |
          python -m pip install --upgrade pip
          python -m pip install pybind11

      # ---- Configure and Build ----
      - name: Configure CMake
        run: cmake -S src/image_sorter/cpp -B build -DCMAKE_BUILD_TYPE=Release

      - name: Build C++ modules
        run: cmake --build build --config Release

      # ---- Copy compiled modules into repo folder ----
      - name: Copy built modules to project folder
        run: |
          mkdir -p src/image_sorter/cpp
          cp build/*image_utils* src/image_sorter/cpp/ || true
          cp build/*thumbnail_utils* src/image_sorter/cpp/ || true
        shell: bash


      # ---- Upload per-platform artifacts ----
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ runner.os }}
          path: image_sorter/cpp/*

  package:
    name: Package all builds into one ZIP
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Download all OS builds
        uses: actions/download-artifact@v4
        with:
          path: builds

      - name: Create unified ZIP
        run: |
          mkdir final
          mv builds/build-Ubuntu* final/linux
          mv builds/build-macOS* final/macos
          mv builds/build-Windows* final/windows
          zip -r compiled_modules.zip final

      - name: Upload unified ZIP
        uses: actions/upload-artifact@v4
        with:
          name: compiled_modules
          path: compiled_modules.zip
